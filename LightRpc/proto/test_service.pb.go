// Code generated by protoc-gen-go. DO NOT EDIT.
// source: test_service.proto

package proto


import . "net/http"
import "io/ioutil"
import "strings"
import "encoding/json"
import "context"
import model "rpc/LightRpc/common"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Test struct {
	Message              *string  `protobuf:"bytes,1,req,name=message" json:"message,omitempty"`
	Id                   *string  `protobuf:"bytes,2,req,name=id" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Test) Reset()         { *m = Test{} }
func (m *Test) String() string { return proto.CompactTextString(m) }
func (*Test) ProtoMessage()    {}
func (*Test) Descriptor() ([]byte, []int) {
	return fileDescriptor_test_service_24d31da26261f961, []int{0}
}
func (m *Test) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Test.Unmarshal(m, b)
}
func (m *Test) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Test.Marshal(b, m, deterministic)
}
func (dst *Test) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Test.Merge(dst, src)
}
func (m *Test) XXX_Size() int {
	return xxx_messageInfo_Test.Size(m)
}
func (m *Test) XXX_DiscardUnknown() {
	xxx_messageInfo_Test.DiscardUnknown(m)
}

var xxx_messageInfo_Test proto.InternalMessageInfo

func (m *Test) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

func (m *Test) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

type Test01 struct {
	Message              *string  `protobuf:"bytes,1,req,name=message" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Test01) Reset()         { *m = Test01{} }
func (m *Test01) String() string { return proto.CompactTextString(m) }
func (*Test01) ProtoMessage()    {}
func (*Test01) Descriptor() ([]byte, []int) {
	return fileDescriptor_test_service_24d31da26261f961, []int{1}
}
func (m *Test01) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Test01.Unmarshal(m, b)
}
func (m *Test01) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Test01.Marshal(b, m, deterministic)
}
func (dst *Test01) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Test01.Merge(dst, src)
}
func (m *Test01) XXX_Size() int {
	return xxx_messageInfo_Test01.Size(m)
}
func (m *Test01) XXX_DiscardUnknown() {
	xxx_messageInfo_Test01.DiscardUnknown(m)
}

var xxx_messageInfo_Test01 proto.InternalMessageInfo

func (m *Test01) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Test)(nil), "proto.Test")
	proto.RegisterType((*Test01)(nil), "proto.Test01")
}

func init() { proto.RegisterFile("test_service.proto", fileDescriptor_test_service_24d31da26261f961) }

var fileDescriptor_test_service_24d31da26261f961 = []byte{
	// 131 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2a, 0x49, 0x2d, 0x2e,
	0x89, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62,
	0x05, 0x53, 0x4a, 0x06, 0x5c, 0x2c, 0x21, 0xa9, 0xc5, 0x25, 0x42, 0x12, 0x5c, 0xec, 0xb9, 0xa9,
	0xc5, 0xc5, 0x89, 0xe9, 0xa9, 0x12, 0x8c, 0x0a, 0x4c, 0x1a, 0x9c, 0x41, 0x30, 0xae, 0x10, 0x1f,
	0x17, 0x53, 0x66, 0x8a, 0x04, 0x13, 0x58, 0x90, 0x29, 0x33, 0x45, 0x49, 0x89, 0x8b, 0x0d, 0xa4,
	0xc3, 0xc0, 0x10, 0xb7, 0x1e, 0x23, 0x4b, 0x2e, 0x1e, 0x8f, 0xd4, 0x9c, 0x9c, 0xfc, 0x60, 0x88,
	0x95, 0x42, 0x9a, 0x5c, 0xdc, 0xae, 0x15, 0xa9, 0xc9, 0x30, 0x2e, 0x2f, 0xc4, 0x0d, 0x7a, 0x10,
	0x73, 0xa4, 0xb8, 0x91, 0xb8, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xdb, 0x3e, 0x3d, 0x0e, 0xac,
	0x00, 0x00, 0x00,
}

type HelloServiceClient interface {
		ExecService(ctx context.Context, in *Test01) (*Test,error)
}

type HelloServiceStruct struct {
		cs *model.ClientConn
}


func NewHelloServiceClient(cs *model.ClientConn) *HelloServiceStruct {
		return &HelloServiceStruct{cs}
}

func (c *HelloServiceStruct) ExecService (ctx context.Context, in *Test01) (*Test, error){
		out := new(Test)
		inputBody ,err := proto.Marshal(in)
		if err != nil {
			return nil,err
		}
		outPutBody, err := c.cs.Invoke(ctx, "HelloService/ExecService", inputBody)
		if err != nil {
			return nil, err 
		}
		err = proto.Unmarshal(outPutBody, out)
		if err != nil{
			return nil,err
		}
		return out, nil 
}

func (s *ServiceMiddle) ServiceDescBuild() model.ServiceDesc{
	var HelloService_ServiceDesc = model.ServiceDesc{
		ServiceName: "HelloService",
		HandlerType: (*HelloServiceServer)(nil),
		Methods: map[string]model.HttpHandler{
			"ExecService": s._ExecService_Handler,
		},
		MetaData:"test_service.pb.go",
	}
	return HelloService_ServiceDesc
}

type HelloServiceServer interface {
		ExecService(ctx context.Context, in *Test01) (*Test,error)
}

func RegisterServiceServer (s ServiceMiddle, handler HelloServiceServer){
		s.S.RegisterService(s.ServiceDescBuild(), handler)
}

type ServiceMiddle struct {
	S *model.Server
}
func (s *ServiceMiddle) _ExecService_Handler(w ResponseWriter, r *Request){
		in := new(Test01)
		body, err := ioutil.ReadAll(r.Body)
		if err != nil {
			s.S.Errors(w, r, err, 400)
			return
		}
		form := r.Header.Get("Content-Type")
		if strings.Contains(form,"proto"){
			err = proto.Unmarshal(body, in)
				if err != nil {
					s.S.Errors(w, r, err, 400)
					return
				}
		}else if strings.Contains(form, "json"){
			err = json.Unmarshal(body, in)
				if err != nil {
					s.S.Errors(w, r, err, 400)
					return
				}
		}
		handler,ok := s.S.M[s.S.SD.ServiceName]
		if !ok{
			s.S.Errors(w, r, err, 500)
			return
		}
		response, err := handler.(HelloServiceServer).ExecService(context.Background(), in)
		if err != nil {
			s.S.Errors(w, r, err, 500)
			return
		}
		var bData []byte
		if strings.Contains(form,"proto"){
			bData, err = proto.Marshal(response)
				if err != nil {
					s.S.Errors(w, r, err, 500)
					return
				}
		}else if strings.Contains(form, "json"){
			bData, err = json.Marshal(response)
				if err != nil {
					s.S.Errors(w, r, err, 500)
					return
				}
		}
		_ , err = w.Write(bData)
		if err != nil {
			s.S.Errors(w, r, err, 500)
			return
		}
		return
}

